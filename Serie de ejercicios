E1.py
----------------------------------------------------------------------------------------------------------------------------------------
#****Estrategia de fuerza bruta**** 
#-Realizar una busqueda exaustiva

from string import ascii_letters, digits
from itertools import product
from time import time

caracteres = ascii_letters +digits

def buscar(con):
    archivo = open("combinaciones.txt", "w") #arbrir el archivo con las cadenas generadas

    if 3<= len(con) <=4:
        for i in range(3,5):
            for comb in product(caracteres, repeat = i):
                prueba = "".join(comb)
                archivo.write(prueba+"\n")
                if prueba == con:
                    print("La contraseña es {}",format(prueba))
                    archivo.close()
                    break

    else:
        print("Ingrese una contraseña de longitud 3 o 4")

if __name__ == "__main__":
    con = input("Ingresa una contrasela\n")
    t0 = time()
    buscar(con)
    print("Tiempo de ejecucion {}".format(round(time()-t0,6)))

#EJECUCION:
# El tiempo en el que se tardo en ejecutar fue de 8 [s]
# Genereo mas de un millon de posibles respuestas
----------------------------------------------------------------------------------------------------------------------------------------
E2.py
----------------------------------------------------------------------------------------------------------------------------------------
#****Algoritmo greedy****

def cambio(cantidad, monedas):
    resultado = []
    while cantidad > 0:
        if cantidad >= monedas[0]:
            num = cantidad//monedas[0]
            cantidad = cantidad - (num*monedas[0])
            resultado.append([monedas[0], num])
        monedas = monedas[1:]
    return resultado

if __name__ == "__main__":
    print(cambio(1000,[20, 10, 5, 2, 10]))
    print(cambio(20,[20, 10, 5, 2, 10]))
    print(cambio(30,[20, 10, 5, 2, 10]))
    print(cambio(98,[50, 20, 5, 1]))
----------------------------------------------------------------------------------------------------------------------------------------
E3.py
----------------------------------------------------------------------------------------------------------------------------------------
def fibonacci1(numero):
    a = 1
    b = 1
    c = 0
    for i in range(1, numero-1):
        c = a + b
        a = b
        b = c
    return c

def fibonacci2(numero):
    a = 1
    b = 1
    for i in range(1, numero-1):
        a,b = b,a+b
    return b

def fibonacci_bottom_up(numero):
    fib_parcial = [1,1]
    while len(fib_parcial) < numero:
        fib_parcial.append(fib_parcial[-1]+fib_parcial[-2])

f = fibonacci(4) # El finonacci de 4 = 3
print(f)

#Descripcion:
# Es un algoritno de tipo bottom up:
# Lo que hace es calcular el fibonacci de un numero, calculando
# consigo el fubonacci de numeros anteriores, para ser sumandos
# y resolver el problema
----------------------------------------------------------------------------------------------------------------------------------------
E4.py
----------------------------------------------------------------------------------------------------------------------------------------
#****Estrategia descendente o top down****

memoria = {1:1, 2:1, 3:1}

def fibonacci(numero):
    a = 1
    b = 1
    for i in range(1, numero-1):
        a, b=b, a+b
    return b

def fibonacci_top_down(numero):
    if numero in memoria:
        return memoria[numero]
    f = fibonacci(numero-1) + fibonacci(numero-2)
    memoria[numero] = f
    return memoria[numero]

print(fibonacci_top_down(5))
print(memoria)
print(fibonacci_top_down(4))
print(memoria)

""""
- El top down es una estrategia que ocupa la recursividad y memoria (por eso el uso de esta variable)
- La funcion fibonacci tambien se ocupa para calcular lo que hay en memoria
"""
-----------------------------------------------------------------------------------------------------------------------------------------
E5.py
-----------------------------------------------------------------------------------------------------------------------------------------
""""
parte ordenada
21              10 12 0 34 15
10 21           12 0  34 15
10 12 21        0  34 15
0 10 12 21      34 15
0 10 12 21 34   15
0 10 21 15 21 34
"""

def insertsort(lista):
    for index in range(1, len(lista)):
        actual = lista[index]
        posicion = index

        while posicion >0 and lista[posicion -1]>actual:
            lista[posicion] = lista[posicion -1]
            posicion = posicion -1 
        lista[posicion] = actual
    return lista

lista = [21, 10, 12, 0, 34, 15]
print(lista)
insertsort(lista)
print(lista)

""""
- Este algoritmo es uno de tipo incrementar: Acomoda una serie de numeros
- de mayor a menor, esta funciona acomodando numeros en la parte ordenada y en
- la que no, compara si el numero que va a acomodar es menor al mayor
- que esta en la parte acomodada, para, actualizarlo con los que estan acomodados 
"""
----------------------------------------------------------------------------------------------------------------------------------------
E6.py
----------------------------------------------------------------------------------------------------------------------------------------
#DIVIDE Y VENCERAS

def quickSort2(lista, inicio, fin):
    if inicio < fin:
        pivote = particion(lista, inicio, fin)
        quickSort2(lista, inicio, pivote-1)
        quickSort2(lista, pivote+1, fin)

def particion(lista, inicio, fin):
    pivote = lista[inicio]
    print("Valor del pivote {}".format(pivote))
    izquierda = inicio + 1
    derecha = fin
    print("Indice izquierdo {} y indice derecho {}".format(izquierda,derecha))

    bandera = False
    while not bandera:
        while izquierda <= derecha and lista[izquierda] <= pivote:
            izquierda = izquierda + 1
        while derecha >= izquierda and lista[derecha] >= pivote:
            derecha = derecha - 1
        if derecha < izquierda:
            bandera = True
        else:
            temp = lista[izquierda]
            lista[izquierda] = lista[derecha]
            lista[derecha] = temp
    print(lista)
    temp = lista[inicio]
    lista[inicio] = lista[derecha]
    lista[derecha] = temp
    return derecha

lista = [21, 10, 12, 0, 34, 15]
print(lista)
quickSort2(lista)
print(lista)

""""
- Este algoritmo ordena una serie de numeros, pero en vez de hacerlo de corrido
- los divide en partes de dos, los ordena y al final los junta.
"""
----.------------------------------------------------------------------------------------------------------------------------------------
E7.py
-----------------------------------------------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D
import random
from time import time

from E5 import insertsort
from E6 import quicksort

datos = [ii*100 for ii in range (1,21)]
tiempo_is = []
tiempo_qs = []

for ii in datos:
    lista_is = random.sample(range(0,10000000),ii)
    lista_qs = lista_is.copy()

    t0 = time()
    insertsort(lista_is)
    tiempo_is.append(round(time()-t0,6))

    t0 = time()
    quicksor(lista_is)
    tiempo_is.append(round(time()-t0,6))

print("Tiempos parciales de ejecucion en insert sort {} [s]".format(tiempo_is))
print("Tiempos parciales de ejecucion en quick sort {} [s]".format(tiempo_qs))

ax = plt.subplot(111)
ax.plot(datos, tiempo_is, label = "insert sort", marker = "*", color = "r")
ax.plot(datos, tiempo_is, lable = "quick sort", marker = "o", color = "b")
ax.set_xlabel("datos")
ax.set_ylabel("tiempos")
ax.grid(True)
ax.legend(loc=2)

plt.title("Tiempos de ejecucion [s] insert sort vs quick sort")
plt.show

""""
- Las funciones insert sort y quicksort compiten para saber cual es la mas eficiente
- para verlo se utiliza "ax" en python (graficadora) y matplotlib.
- En cuestion de tiempo quicksort es mas eficiente, pero, endatos estan igual
"""
-----------------------------------------------------------------------------------------------------------------------------------------
E8.py
-----------------------------------------------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import random

def insertsort(lista):
    global times 
    for i in range(1, len(lista)):
        times += 1
        actual = lista[i]
        posicion = i
        while posicion > 0 and lista[posicion-1] > actual:
            times += 1
            lista[posicion] = lista[posicion-1]
            posicion = posicion -1
        lista[posicion] = actual
    return lista

TAM = 101
eje_x = list(range(1,TAM,1))
eje_y = []

lista_variable = []

for num in eje_x:
    lista_variable = rando.sample(sange(0,1000),num)
    times = 0
    lista_variable = insertsort(lista_variable)
    eje_y.append(times)

fig, ax = plt.subplots(facecolor = "w", edgecolor = "k")
ax.plot(eje_x,eje_y,marker = "o", color = "b", linestyle "None")

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.grid(True)
ax.legend(["insert sort"])
plt.title("Insert sort")
plt.show()

""""
- En este ejercicio se ocupa la biblioteca matplotlib para usar insert sort.
- Utilizando la graficadora de phyton se puede observar que la linea exponencial
- de insert sort varia mucho, a lo que s epuede llegar esque pocos datos
- se pueden traducir en mas tiempo de realizacion
"""
-----------------------------------------------------------------------------------------------------------------------------------------

CONCLUSIONES:

Los problemas que se nos presentan como programadores abundan de a monton, el saber diferentes tipos de estrategias
o algoritmos es indsipensable para la optimizacion de estos problemas e incluso para trabajar menos. En la serie de ejercicios presenta-
das en las clases en linea se nos guio para el conocimiento de los diferentes tipos de algoritmo. No puedo decir que 100% aprendi a usarlos
pero gracias a el apoyo del profe puedo saber lo basico, ademas de ser una pequeña probada de las diversas formas que existe para tratar 
la solucion de un problema.

Alumno: Martínez Villegas Pedro 

